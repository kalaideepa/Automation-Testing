<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="17" passed="14" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-03-04T11:23:29 IST" name="Suite" finished-at="2024-03-04T11:23:29 IST" duration-ms="177">
    <groups>
      <group name="smoke">
        <method signature="CarLoan.webmobile()[pri:0, instance:test.CarLoan@6cd28fa7]" name="webmobile" class="test.CarLoan"/>
        <method signature="GoldLoan.mobile()[pri:0, instance:test.GoldLoan@5acf93bb]" name="mobile" class="test.GoldLoan"/>
        <method signature="HomeLoan.mobile()[pri:0, instance:test.HomeLoan@47987356]" name="mobile" class="test.HomeLoan"/>
        <method signature="PersonalLoan.mobile()[pri:0, instance:test.PersonalLoan@7e7be63f]" name="mobile" class="test.PersonalLoan"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-03-04T11:23:29 IST" name="Test" finished-at="2024-03-04T11:23:29 IST" duration-ms="177">
      <class name="test.PersonalLoan">
        <test-method signature="API(java.lang.String,java.lang.String)[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="API" data-provider="getData" finished-at="2024-03-04T11:23:29 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[First Set Username]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[First Set password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- API -->
        <test-method signature="API(java.lang.String,java.lang.String)[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="API" data-provider="getData" finished-at="2024-03-04T11:23:29 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Second Set Username]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Second Set password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- API -->
        <test-method signature="API(java.lang.String,java.lang.String)[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="API" data-provider="getData" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Third Set Username]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Third Set password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- API -->
        <test-method signature="mobile()[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="mobile" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobile -->
        <test-method signature="web()[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="web" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- web -->
        <test-method is-config="true" signature="demo()[pri:0, instance:test.PersonalLoan@7e7be63f]" started-at="2024-03-04T11:23:29 IST" name="demo" finished-at="2024-03-04T11:23:29 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
      </class> <!-- test.PersonalLoan -->
      <class name="test.GoldLoan">
        <test-method signature="API()[pri:0, instance:test.GoldLoan@5acf93bb]" started-at="2024-03-04T11:23:29 IST" name="API" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- API -->
        <test-method signature="Gold(java.lang.String)[pri:0, instance:test.GoldLoan@5acf93bb]" started-at="2024-03-04T11:23:29 IST" name="Gold" finished-at="2024-03-04T11:23:29 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Gopi]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Gold -->
        <test-method signature="mobile()[pri:0, instance:test.GoldLoan@5acf93bb]" started-at="2024-03-04T11:23:29 IST" name="mobile" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobile -->
        <test-method signature="web()[pri:0, instance:test.GoldLoan@5acf93bb]" started-at="2024-03-04T11:23:29 IST" name="web" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- web -->
      </class> <!-- test.GoldLoan -->
      <class name="test.CarLoan">
        <test-method signature="car(java.lang.String)[pri:0, instance:test.CarLoan@6cd28fa7]" started-at="2024-03-04T11:23:29 IST" name="car" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[qaclickacademy]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- car -->
        <test-method signature="web()[pri:0, instance:test.CarLoan@6cd28fa7]" started-at="2024-03-04T11:23:29 IST" name="web" finished-at="2024-03-04T11:23:29 IST" duration-ms="5" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.CarLoan.web(CarLoan.java:12)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- web -->
        <test-method signature="webAPI()[pri:0, instance:test.CarLoan@6cd28fa7]" started-at="2024-03-04T11:23:29 IST" name="webAPI" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webAPI -->
        <test-method signature="webmobile()[pri:0, instance:test.CarLoan@6cd28fa7]" started-at="2024-03-04T11:23:29 IST" name="webmobile" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.CarLoan.webmobile(CarLoan.java:17)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webmobile -->
      </class> <!-- test.CarLoan -->
      <class name="test.HomeLoan">
        <test-method is-config="true" signature="demo()[pri:0, instance:test.HomeLoan@47987356]" started-at="2024-03-04T11:23:29 IST" name="demo" finished-at="2024-03-04T11:23:29 IST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
        <test-method signature="anime()[pri:0, instance:test.HomeLoan@47987356]" started-at="2024-03-04T11:23:29 IST" name="anime" finished-at="2024-03-04T11:23:29 IST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- anime -->
        <test-method signature="mobile()[pri:0, instance:test.HomeLoan@47987356]" started-at="2024-03-04T11:23:29 IST" name="mobile" finished-at="2024-03-04T11:23:29 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobile -->
        <test-method signature="API()[pri:0, instance:test.HomeLoan@47987356]" started-at="2024-03-04T11:23:29 IST" name="API" finished-at="2024-03-04T11:23:29 IST" depends-on-methods="test.HomeLoan.mobile" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- API -->
      </class> <!-- test.HomeLoan -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
